1.set是一个不包含空元素的集合，最多只有一个空元素
<<<<<<< HEAD

=======
>>>>>>> f5615a90c53429ebc4a7f05bd9673ebedd5885ad
2.值传递：(形式参数类型是基本数据类型)：方法调用时，
    实际参数把它的值传递给对应的形式参数，
形式参数只是用实际参数的值初始化自己的存储单元内容，
是两个不同的存储单元，所以方法执行中形式参数值的改变不影响实际
参数的值。
引用传递：(形式参数类型是引用数据类型参数)：也称为传地址。
方法调用时，实际参数是对象(或数组)，这时实际参数与形式参数
指向同一个地址， 在方法执行中，对形式参数的操作实际上就是对
实际参数的操作，这个结果在方法结束后被保留了下来， 所以方法
执行中形式参数的改变将会影响实际参数
3.数据转换，数据绑定，数据格式化

4.运行时数据区包括:虚拟机栈区，堆区，方法区，本地方法栈，
程序计数器。
虚拟机堆区：栈区，线程私有，存放基本类型，对象的引用和 returnAddress ，
    在编译期间完成分配。
堆区 ， JAVA 堆，也称 GC 堆，所有线程共享，存放对象的实例和数组， JAVA 堆
    是垃圾收集器管理的主要区域。
方法区 ：所有线程共享，存储已被虚拟机加载的类信息，常量，静态变量，
    即时编译器编译后的代码等数据。这个区域的内存回收目标主要是
    针对常量池的对象的回收和对类型的卸载。
程序计数器 ：线程私有，每个线程都有自己独立的程序计数器，用来
    指示下一条指令的地址。
<<<<<<< HEAD

=======
>>>>>>> f5615a90c53429ebc4a7f05bd9673ebedd5885ad
5.java初始化过程： 
1). 初始化父类中的静态成员变量和静态代码块 ； 
2). 初始化子类中的静态成员变量和静态代码块 ； 
3).初始化父类的普通成员变量和代码块，再执行父类的构造方法；
4).初始化子类的普通成员变量和代码块，再执行子类的构造方法； 
<<<<<<< HEAD

6.stringbuffer,线程安全的可变string对象
  stringbuilder,线程不安全的可变string对象

7.强引用 软引用 弱引用 虚引用

8.ConcurrentHashMap的工作机制:通过把整个Map分为N个Segment（类似HashTable），
可以提供相同的线程安全，但是效率提升N倍，默认提升16倍
=======
6.stringbuffer,线程安全的可变string对象
  stringbuilder,线程不安全的可变string对象
>>>>>>> f5615a90c53429ebc4a7f05bd9673ebedd5885ad
